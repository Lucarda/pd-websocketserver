name: Build pd-websocketserver

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PD_VERSION: 0.55-2
  CMAKE_BUILD_PARALLEL_LEVEL: 4

jobs:
  # ===============================================================
  Linux-Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-linux

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential puredata-dev

      - name: Build pd-websocketserver
        run: make
        env:
          CC: "ccache gcc"

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          find . -name "websocketserver*.pd_linux" -exec cp {} artifacts/ \;
          cp -f websocketserver-help.pd artifacts/ || true
          cp -f send_receive.html artifacts/ || true
          cp -f LICENSE artifacts/ || true
          cp -f README.md artifacts/ || true
          cp -f CHANGELOG.txt artifacts/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocketserver-linux
          path: artifacts/

  # ===============================================================
  macOS-Intel-Build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-macos-intel

      - name: Install Pure Data via Homebrew
        run: |
          brew update
          brew install --cask pd
          ls -la /Applications/Pd-*.app/Contents/Resources/

      - name: Setup PD include directory
        run: |
          # Create include directory in user's home directory
          mkdir -p $HOME/pd_include
          # Copy header files to our include location
          cp -r /Applications/Pd-*.app/Contents/Resources/src/*.h $HOME/pd_include/
          ls -la $HOME/pd_include/

      - name: Build pd-websocketserver
        run: |
          # Find pd installation
          PD_APP=$(find /Applications -name "Pd-*.app" | head -1)
          echo "Found PD at: $PD_APP"
          # Add -Wno-error=int-conversion and -Wno-error=incompatible-function-pointer-types flags
          # to suppress the errors related to function signatures
          make CFLAGS="-I$HOME/pd_include -Wno-error=int-conversion -Wno-error=incompatible-function-pointer-types -fpermissive" LDFLAGS="-L$PD_APP/Contents/Resources/bin"
        env:
          CC: "ccache gcc"

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          find . -name "websocketserver*.pd_darwin" -exec cp {} artifacts/ \;
          cp -f websocketserver-help.pd artifacts/ || true
          cp -f send_receive.html artifacts/ || true
          cp -f LICENSE artifacts/ || true
          cp -f README.md artifacts/ || true
          cp -f CHANGELOG.txt artifacts/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocketserver-macos-intel
          path: artifacts/

  # ===============================================================
  macOS-ARM-Build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-macos-arm

      - name: Install Pure Data via Homebrew
        run: |
          brew update
          brew install --cask pd
          ls -la /Applications/Pd-*.app/Contents/Resources/

      - name: Setup PD include directory
        run: |
          # Create include directory in user's home directory
          mkdir -p $HOME/pd_include
          # Copy header files to our include location
          cp -r /Applications/Pd-*.app/Contents/Resources/src/*.h $HOME/pd_include/
          ls -la $HOME/pd_include/

      - name: Build pd-websocketserver for ARM
        run: |
          # Find pd installation
          PD_APP=$(find /Applications -name "Pd-*.app" | head -1)
          echo "Found PD at: $PD_APP"
          # Add -Wno-error=int-conversion and -Wno-error=incompatible-function-pointer-types flags
          # for ARM build as well
          make CFLAGS="-I$HOME/pd_include -arch arm64 -Wno-error=int-conversion -Wno-error=incompatible-function-pointer-types -fpermissive" LDFLAGS="-L$PD_APP/Contents/Resources/bin -arch arm64"
        env:
          CC: "ccache gcc"

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          # Rename the extension to indicate ARM architecture
          find . -name "websocketserver*.pd_darwin" -exec cp {} artifacts/websocketserver.pd_arm64 \;
          cp -f websocketserver-help.pd artifacts/ || true
          cp -f send_receive.html artifacts/ || true
          cp -f LICENSE artifacts/ || true
          cp -f README.md artifacts/ || true
          cp -f CHANGELOG.txt artifacts/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocketserver-macos-arm
          path: artifacts/

  # ===============================================================
  Windows-Build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: D:/ccache
          key: ccache-windows-${{ github.run_id }}
          restore-keys: |
            ccache-windows-${{ github.sha }}
            ccache-windows-

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc 
            make
            wget
            unzip
            tar
            mingw64/mingw-w64-x86_64-ccache

      - name: Get Pure Data
        shell: msys2 {0}
        run: |
          # Download prebuilt binary for Windows
          wget -O pd-${{ env.PD_VERSION }}.msw.zip http://msp.ucsd.edu/Software/pd-${{ env.PD_VERSION }}.msw.zip
          unzip -q pd-${{ env.PD_VERSION }}.msw.zip
          mkdir -p /mingw64/include/pd
          # Copy Windows header files
          cp pd-${{ env.PD_VERSION }}/src/*.h /mingw64/include/pd/
          # Create symbolic link for pd-lib-builder
          mkdir -p "C:/Program Files"
          ln -sf "$PWD/pd-${{ env.PD_VERSION }}" "/C/Program Files/Pd"

      - name: Build pd-websocketserver
        shell: msys2 {0}
        run: |
          export CCACHE_COMPRESS=1
          export CCACHE_COMPRESSLEVEL=6
          export CCACHE_MAXSIZE=1G
          export CCACHE_DIR=D:/ccache
          
          # Use Windows-compatible compiler flags
          make CFLAGS="-I/mingw64/include/pd -Wno-error -fpermissive" CC="ccache gcc"
          make localdep_windows
          ccache -s
        env:
          CCACHE_COMPRESS: "1"
          CCACHE_COMPRESSLEVEL: "6"
          CCACHE_MAXSIZE: "1G"
          CCACHE_DIR: D:/ccache

      - name: Save build cache
        uses: actions/cache/save@v4
        with:
          path: D:/ccache
          key: ccache-windows-${{ github.run_id }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          find . -name "websocketserver*.dll" -exec cp {} artifacts/ \; || true
          find . -name "websocketserver*.m_*" -exec cp {} artifacts/ \; || true
          cp -f websocketserver-help.pd artifacts/ || true
          cp -f send_receive.html artifacts/ || true
          cp -f LICENSE artifacts/ || true
          cp -f README.md artifacts/ || true
          cp -f CHANGELOG.txt artifacts/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocketserver-windows
          path: artifacts/

  # ===============================================================
  merge-and-release:
    needs: [Linux-Build, macOS-Intel-Build, macOS-ARM-Build, Windows-Build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Create merged package
        run: |
          mkdir -p websocketserver
          cp -r all-artifacts/websocketserver-linux/* websocketserver/ || true
          cp -r all-artifacts/websocketserver-macos-intel/* websocketserver/ || true
          cp -r all-artifacts/websocketserver-macos-arm/* websocketserver/ || true
          cp -r all-artifacts/websocketserver-windows/* websocketserver/ || true
          zip -r websocketserver-all.zip websocketserver/
          
          # Also create platform-specific packages
          cd all-artifacts
          zip -r ../websocketserver-linux.zip websocketserver-linux/
          zip -r ../websocketserver-macos.zip websocketserver-macos-intel/ websocketserver-macos-arm/
          zip -r ../websocketserver-windows.zip websocketserver-windows/

      - name: Upload merged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocketserver-complete
          path: websocketserver/

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            websocketserver-all.zip
            websocketserver-linux.zip
            websocketserver-macos.zip
            websocketserver-windows.zip
          draft: true
